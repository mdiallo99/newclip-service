{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\n/**\n * Create an AuthProvider component to wrap a React app with, it will take care of common AuthClient\n * lifecycle handling (such as initialization and token refresh).\n *\n * @param AuthContext the Auth context to be used by the created AuthProvider\n *\n * @returns the AuthProvider component\n */\n\nexport function createAuthProvider(AuthContext) {\n  var defaultInitOptions = {\n    onLoad: 'check-sso'\n  };\n  var initialState = {\n    initialized: false,\n    isAuthenticated: false,\n    isLoading: true\n  };\n  return function (_super) {\n    __extends(KeycloakProvider, _super);\n\n    function KeycloakProvider() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.state = __assign({}, initialState);\n\n      _this.onError = function (event) {\n        return function (error) {\n          var onEvent = _this.props.onEvent; // Notify Events listener\n\n          onEvent && onEvent(event, error);\n        };\n      };\n\n      _this.updateState = function (event) {\n        return function () {\n          var _a = _this.props,\n              authClient = _a.authClient,\n              onEvent = _a.onEvent,\n              onTokens = _a.onTokens,\n              isLoadingCheck = _a.isLoadingCheck;\n          var _b = _this.state,\n              prevInitialized = _b.initialized,\n              prevAuthenticated = _b.isAuthenticated,\n              prevLoading = _b.isLoading; // Notify Events listener\n\n          onEvent && onEvent(event); // Check Loading state\n\n          var isLoading = isLoadingCheck ? isLoadingCheck(authClient) : false; // Check if user is authenticated\n\n          var isAuthenticated = isUserAuthenticated(authClient); // Avoid double-refresh if state hasn't changed\n\n          if (!prevInitialized || isAuthenticated !== prevAuthenticated || isLoading !== prevLoading) {\n            _this.setState({\n              initialized: true,\n              isAuthenticated: isAuthenticated,\n              isLoading: isLoading\n            });\n          } // Notify token listener, if any\n\n\n          var idToken = authClient.idToken,\n              refreshToken = authClient.refreshToken,\n              token = authClient.token;\n          onTokens && onTokens({\n            idToken: idToken,\n            refreshToken: refreshToken,\n            token: token\n          });\n        };\n      };\n\n      _this.refreshToken = function (event) {\n        return function () {\n          var _a = _this.props,\n              autoRefreshToken = _a.autoRefreshToken,\n              authClient = _a.authClient,\n              onEvent = _a.onEvent; // Notify Events listener\n\n          onEvent && onEvent(event);\n\n          if (autoRefreshToken !== false) {\n            // Refresh Keycloak token\n            authClient.updateToken(5);\n          }\n        };\n      };\n\n      return _this;\n    }\n\n    KeycloakProvider.prototype.componentDidMount = function () {\n      this.init();\n    };\n\n    KeycloakProvider.prototype.componentDidUpdate = function (_a) {\n      var prevAuthClient = _a.authClient,\n          prevInitOptions = _a.initOptions;\n      var _b = this.props,\n          initOptions = _b.initOptions,\n          authClient = _b.authClient;\n\n      if (authClient !== prevAuthClient || !isEqual(initOptions, prevInitOptions)) {\n        // De-init previous AuthClient instance\n        prevAuthClient.onReady = undefined;\n        prevAuthClient.onAuthSuccess = undefined;\n        prevAuthClient.onAuthError = undefined;\n        prevAuthClient.onAuthRefreshSuccess = undefined;\n        prevAuthClient.onAuthRefreshError = undefined;\n        prevAuthClient.onAuthLogout = undefined;\n        prevAuthClient.onTokenExpired = undefined; // Reset state\n\n        this.setState(__assign({}, initialState)); // Init new AuthClient instance\n\n        this.init();\n      }\n    };\n\n    KeycloakProvider.prototype.init = function () {\n      var _a = this.props,\n          initOptions = _a.initOptions,\n          authClient = _a.authClient; // Attach Keycloak listeners\n\n      authClient.onReady = this.updateState('onReady');\n      authClient.onAuthSuccess = this.updateState('onAuthSuccess');\n      authClient.onAuthError = this.onError('onAuthError');\n      authClient.onAuthRefreshSuccess = this.updateState('onAuthRefreshSuccess');\n      authClient.onAuthRefreshError = this.onError('onAuthRefreshError');\n      authClient.onAuthLogout = this.updateState('onAuthLogout');\n      authClient.onTokenExpired = this.refreshToken('onTokenExpired');\n      authClient.init(__assign(__assign({}, defaultInitOptions), initOptions)).catch(this.onError('onInitError'));\n    };\n\n    KeycloakProvider.prototype.render = function () {\n      var _a = this.props,\n          children = _a.children,\n          authClient = _a.authClient,\n          LoadingComponent = _a.LoadingComponent;\n      var _b = this.state,\n          initialized = _b.initialized,\n          isLoading = _b.isLoading;\n\n      if (!!LoadingComponent && (!initialized || isLoading)) {\n        return LoadingComponent;\n      }\n\n      return React.createElement(AuthContext.Provider, {\n        value: {\n          initialized: initialized,\n          authClient: authClient\n        }\n      }, children);\n    };\n\n    return KeycloakProvider;\n  }(React.PureComponent);\n}\n\nfunction isUserAuthenticated(authClient) {\n  return !!authClient.idToken && !!authClient.token;\n}\n\nexport default createAuthProvider;","map":{"version":3,"sources":["@react-keycloak/core/provider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\n/**\n * Create an AuthProvider component to wrap a React app with, it will take care of common AuthClient\n * lifecycle handling (such as initialization and token refresh).\n *\n * @param AuthContext the Auth context to be used by the created AuthProvider\n *\n * @returns the AuthProvider component\n */\nexport function createAuthProvider(AuthContext) {\n    var defaultInitOptions = {\n        onLoad: 'check-sso',\n    };\n    var initialState = {\n        initialized: false,\n        isAuthenticated: false,\n        isLoading: true,\n    };\n    return /** @class */ (function (_super) {\n        __extends(KeycloakProvider, _super);\n        function KeycloakProvider() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.state = __assign({}, initialState);\n            _this.onError = function (event) { return function (error) {\n                var onEvent = _this.props.onEvent;\n                // Notify Events listener\n                onEvent && onEvent(event, error);\n            }; };\n            _this.updateState = function (event) { return function () {\n                var _a = _this.props, authClient = _a.authClient, onEvent = _a.onEvent, onTokens = _a.onTokens, isLoadingCheck = _a.isLoadingCheck;\n                var _b = _this.state, prevInitialized = _b.initialized, prevAuthenticated = _b.isAuthenticated, prevLoading = _b.isLoading;\n                // Notify Events listener\n                onEvent && onEvent(event);\n                // Check Loading state\n                var isLoading = isLoadingCheck ? isLoadingCheck(authClient) : false;\n                // Check if user is authenticated\n                var isAuthenticated = isUserAuthenticated(authClient);\n                // Avoid double-refresh if state hasn't changed\n                if (!prevInitialized ||\n                    isAuthenticated !== prevAuthenticated ||\n                    isLoading !== prevLoading) {\n                    _this.setState({\n                        initialized: true,\n                        isAuthenticated: isAuthenticated,\n                        isLoading: isLoading,\n                    });\n                }\n                // Notify token listener, if any\n                var idToken = authClient.idToken, refreshToken = authClient.refreshToken, token = authClient.token;\n                onTokens &&\n                    onTokens({\n                        idToken: idToken,\n                        refreshToken: refreshToken,\n                        token: token,\n                    });\n            }; };\n            _this.refreshToken = function (event) { return function () {\n                var _a = _this.props, autoRefreshToken = _a.autoRefreshToken, authClient = _a.authClient, onEvent = _a.onEvent;\n                // Notify Events listener\n                onEvent && onEvent(event);\n                if (autoRefreshToken !== false) {\n                    // Refresh Keycloak token\n                    authClient.updateToken(5);\n                }\n            }; };\n            return _this;\n        }\n        KeycloakProvider.prototype.componentDidMount = function () {\n            this.init();\n        };\n        KeycloakProvider.prototype.componentDidUpdate = function (_a) {\n            var prevAuthClient = _a.authClient, prevInitOptions = _a.initOptions;\n            var _b = this.props, initOptions = _b.initOptions, authClient = _b.authClient;\n            if (authClient !== prevAuthClient ||\n                !isEqual(initOptions, prevInitOptions)) {\n                // De-init previous AuthClient instance\n                prevAuthClient.onReady = undefined;\n                prevAuthClient.onAuthSuccess = undefined;\n                prevAuthClient.onAuthError = undefined;\n                prevAuthClient.onAuthRefreshSuccess = undefined;\n                prevAuthClient.onAuthRefreshError = undefined;\n                prevAuthClient.onAuthLogout = undefined;\n                prevAuthClient.onTokenExpired = undefined;\n                // Reset state\n                this.setState(__assign({}, initialState));\n                // Init new AuthClient instance\n                this.init();\n            }\n        };\n        KeycloakProvider.prototype.init = function () {\n            var _a = this.props, initOptions = _a.initOptions, authClient = _a.authClient;\n            // Attach Keycloak listeners\n            authClient.onReady = this.updateState('onReady');\n            authClient.onAuthSuccess = this.updateState('onAuthSuccess');\n            authClient.onAuthError = this.onError('onAuthError');\n            authClient.onAuthRefreshSuccess = this.updateState('onAuthRefreshSuccess');\n            authClient.onAuthRefreshError = this.onError('onAuthRefreshError');\n            authClient.onAuthLogout = this.updateState('onAuthLogout');\n            authClient.onTokenExpired = this.refreshToken('onTokenExpired');\n            authClient\n                .init(__assign(__assign({}, defaultInitOptions), initOptions))\n                .catch(this.onError('onInitError'));\n        };\n        KeycloakProvider.prototype.render = function () {\n            var _a = this.props, children = _a.children, authClient = _a.authClient, LoadingComponent = _a.LoadingComponent;\n            var _b = this.state, initialized = _b.initialized, isLoading = _b.isLoading;\n            if (!!LoadingComponent && (!initialized || isLoading)) {\n                return LoadingComponent;\n            }\n            return (React.createElement(AuthContext.Provider, { value: { initialized: initialized, authClient: authClient } }, children));\n        };\n        return KeycloakProvider;\n    }(React.PureComponent));\n}\nfunction isUserAuthenticated(authClient) {\n    return !!authClient.idToken && !!authClient.token;\n}\nexport default createAuthProvider;\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}