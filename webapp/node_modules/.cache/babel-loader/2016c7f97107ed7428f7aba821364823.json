{"ast":null,"code":"import instance from \"axios\";\nimport { APP_ENDPOINTS } from \"../../constants/Constants\";\nimport { helpers } from \"./Helpers\";\nimport { userToken } from \"../../App\";\n/**\r\n * Manages the Bearer token for authentication\r\n * @param token\r\n * @returns {`Bearer ${string}`}\r\n */\n\nconst bearerAuth = token => {\n  return `Bearer ${token}`;\n};\n/**\r\n * Gets a user by his token\r\n * @param token user token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst getUserMe = token => {\n  return instance.get(APP_ENDPOINTS.USER_PROFILE_ENDPOINT, {\n    headers: {\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Load the user profile\r\n * @param token\r\n * @param user\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst saveUserMe = (token, user) => {\n  return instance.post(APP_ENDPOINTS.USER_PROFILE_ENDPOINT + 'me', user, {\n    headers: {\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Make a reauest for getting the list of users\r\n * @param token user token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst getUserList = token => {\n  return instance.get(APP_ENDPOINTS.USER_LIST_ENDPOINT, {\n    headers: {\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Adds a new User\r\n * @param user json object\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst addUser = (user, token) => {\n  return instance.post(APP_ENDPOINTS.ADD_USER_ENDPOINT, user, {\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Gets user by email request\r\n * @param email\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst getUserByEmail = (email, token) => {\n  return instance.get(APP_ENDPOINTS.USER_PROFILE_ENDPOINT + email, {\n    headers: {\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Request for getting available articles in the User Company\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst getSylobData = async token => {\n  const request = await APP_API.getUserByEmail(helpers.getUserEmail(), userToken);\n  const companyCode = await request.data.company.code;\n  return instance.get(APP_ENDPOINTS.SYLOB_ENDPOINT, {\n    headers: {\n      'Access-Control-Allow-Origin': \"*\",\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Returns the list of Companies\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst getCompanyList = token => {\n  return instance.get(APP_ENDPOINTS.COMPANY_LIST_ENDPOINT, {\n    headers: {\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Adds new company\r\n * @param company\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst saveCompany = (company, token) => {\n  return instance.post(APP_ENDPOINTS.ADD_COMPANY_ENDPOINT, company, {\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/***\r\n * Gets a specific company by its code\r\n * @param companyCode\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst getCompanyByCode = (companyCode, token) => {\n  return instance.get(APP_ENDPOINTS.GET_COMPANY_BY_CODE_ENDPOINT + companyCode, {\n    headers: {\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Gets the list of addresses\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst getAddressList = token => {\n  return instance.get(APP_ENDPOINTS.ADDRESS_LIST_ENDPOINT, {\n    headers: {\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Adds the Address\r\n * @param address\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst saveAddress = (address, token) => {\n  return instance.post(APP_ENDPOINTS.ADD_ADDRESS_ENDPOINT, address, {\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Load the list of articles\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst loadArticleList = token => {\n  return instance.get(APP_ENDPOINTS.SYLOB_DATA_ENDPOINT, {\n    headers: {\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Create a new Article from Sylob\r\n * @param sylobObject\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst addArticlesInVouchar = (articles, token) => {\n  return instance.post(APP_ENDPOINTS.ADD_SYLOB_ARTICLE_ENDPOINT, articles, {\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Gets available kits in the User's Company\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst getKitsListFromSylob = async token => {\n  // const request =  await APP_API.getUserByEmail(helpers.getUserEmail(), userToken)\n  // const companyCode = await request.data.company.code;\n  return instance.get(APP_ENDPOINTS.SYLOB_KIT_LIST_ENDPOINT, {\n    headers: {\n      'Access-Control-Allow-Origin': \"*\",\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Gets a specific Kit by its label (label is a key in Sylob)\r\n * @param label\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\n\n\nconst getKitByLabel = (label, token) => {\n  return instance.get(APP_ENDPOINTS.FIND_KIT_BY_LABEL_ENDPOINT + label, {\n    headers: {\n      'Authorization': bearerAuth(token)\n    }\n  });\n};\n/**\r\n * Exportation\r\n * @type {{getCompanyList: (function(*=): Promise<AxiosResponse<*>>), getKitByLabel: (function(*, *=): Promise<AxiosResponse<*>>), getSylobData: (function(*=): Promise<AxiosResponse<any>>), getAddressList: (function(*=): Promise<AxiosResponse<*>>), addUser: (function(*=, *=): Promise<AxiosResponse<*>>), getKitsListFromSylob: (function(*=): Promise<AxiosResponse<any>>), getUserList: (function(*=): Promise<AxiosResponse<*>>), getUserByEmail: (function(*, *=): Promise<AxiosResponse<*>>), saveCompany: (function(*=, *=): Promise<AxiosResponse<*>>), saveAddress: (function(*=, *=): Promise<AxiosResponse<*>>), addArticlesInVouchar: (function(*=, *=): Promise<AxiosResponse<*>>), getCompanyByCode: (function(*, *=): Promise<AxiosResponse<*>>), getUserMe: (function(*=): Promise<AxiosResponse<*>>), saveUserMe: (function(*=, *=): Promise<AxiosResponse<*>>), loadArticleList: (function(*=): Promise<AxiosResponse<*>>)}}\r\n */\n\n\nexport const APP_API = {\n  getUserMe,\n  saveUserMe,\n  getUserList,\n  getCompanyList,\n  getAddressList,\n  saveAddress,\n  saveCompany,\n  getCompanyByCode,\n  addUser,\n  getUserByEmail,\n  getSylobData,\n  loadArticleList,\n  addArticlesInVouchar,\n  getKitsListFromSylob,\n  getKitByLabel\n};","map":{"version":3,"sources":["C:/Users/mdiallo/Desktop/newclip-service/webapp/src/components/helpers/AppRequests.js"],"names":["instance","APP_ENDPOINTS","helpers","userToken","bearerAuth","token","getUserMe","get","USER_PROFILE_ENDPOINT","headers","saveUserMe","user","post","getUserList","USER_LIST_ENDPOINT","addUser","ADD_USER_ENDPOINT","getUserByEmail","email","getSylobData","request","APP_API","getUserEmail","companyCode","data","company","code","SYLOB_ENDPOINT","getCompanyList","COMPANY_LIST_ENDPOINT","saveCompany","ADD_COMPANY_ENDPOINT","getCompanyByCode","GET_COMPANY_BY_CODE_ENDPOINT","getAddressList","ADDRESS_LIST_ENDPOINT","saveAddress","address","ADD_ADDRESS_ENDPOINT","loadArticleList","SYLOB_DATA_ENDPOINT","addArticlesInVouchar","articles","ADD_SYLOB_ARTICLE_ENDPOINT","getKitsListFromSylob","SYLOB_KIT_LIST_ENDPOINT","getKitByLabel","label","FIND_KIT_BY_LABEL_ENDPOINT"],"mappings":"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","sourcesContent":["import instance from \"axios\";\r\nimport {APP_ENDPOINTS} from \"../../constants/Constants\";\r\nimport {helpers} from \"./Helpers\";\r\nimport {userToken} from \"../../App\";\r\n\r\n/**\r\n * Manages the Bearer token for authentication\r\n * @param token\r\n * @returns {`Bearer ${string}`}\r\n */\r\nconst bearerAuth = (token) => {\r\n    return `Bearer ${token}`\r\n}\r\n\r\n/**\r\n * Gets a user by his token\r\n * @param token user token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst getUserMe = (token) => {\r\n    return instance.get(APP_ENDPOINTS.USER_PROFILE_ENDPOINT, {\r\n        headers: {'Authorization': bearerAuth(token)}\r\n    })\r\n}\r\n\r\n/**\r\n * Load the user profile\r\n * @param token\r\n * @param user\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst saveUserMe = (token, user) => {\r\n\r\n    return instance.post(APP_ENDPOINTS.USER_PROFILE_ENDPOINT +'me', user, {\r\n        headers: {'Authorization': bearerAuth(token)}\r\n    })\r\n}\r\n\r\n/**\r\n * Make a reauest for getting the list of users\r\n * @param token user token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst getUserList = (token) => {\r\n    return instance.get(APP_ENDPOINTS.USER_LIST_ENDPOINT, {\r\n        headers: {'Authorization': bearerAuth(token)}\r\n    })\r\n}\r\n\r\n/**\r\n * Adds a new User\r\n * @param user json object\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst addUser = (user, token) => {\r\n    return instance.post(APP_ENDPOINTS.ADD_USER_ENDPOINT, user, {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': bearerAuth(token)\r\n            }\r\n    })\r\n}\r\n\r\n/**\r\n * Gets user by email request\r\n * @param email\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst getUserByEmail = (email, token) => {\r\n    return instance.get(APP_ENDPOINTS.USER_PROFILE_ENDPOINT+email, {\r\n        headers: {'Authorization': bearerAuth(token)}\r\n    })\r\n}\r\n\r\n/**\r\n * Request for getting available articles in the User Company\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst getSylobData = async (token) => {\r\n    const request =  await APP_API.getUserByEmail(helpers.getUserEmail(), userToken)\r\n    const companyCode = await request.data.company.code;\r\n\r\n    return instance.get(APP_ENDPOINTS.SYLOB_ENDPOINT, {\r\n        headers: {\r\n                 'Access-Control-Allow-Origin':\"*\",\r\n                 'Authorization': bearerAuth(token)\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Returns the list of Companies\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst getCompanyList = (token) => {\r\n    return instance.get(APP_ENDPOINTS.COMPANY_LIST_ENDPOINT, {\r\n        headers: {'Authorization': bearerAuth(token)}\r\n    })\r\n}\r\n\r\n/**\r\n * Adds new company\r\n * @param company\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst saveCompany = (company, token) => {\r\n    return instance.post(APP_ENDPOINTS.ADD_COMPANY_ENDPOINT, company, {\r\n        headers: {'Content-type': 'application/json',\r\n                  'Authorization': bearerAuth(token)}\r\n                }\r\n                )\r\n}\r\n\r\n/***\r\n * Gets a specific company by its code\r\n * @param companyCode\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst getCompanyByCode = (companyCode, token) => {\r\n    return instance.get(APP_ENDPOINTS.GET_COMPANY_BY_CODE_ENDPOINT+companyCode, {\r\n        headers: {'Authorization': bearerAuth(token)}\r\n    })\r\n}\r\n\r\n/**\r\n * Gets the list of addresses\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst getAddressList = (token) => {\r\n    return instance.get(APP_ENDPOINTS.ADDRESS_LIST_ENDPOINT, {\r\n        headers: {'Authorization': bearerAuth(token)}\r\n    })\r\n}\r\n\r\n/**\r\n * Adds the Address\r\n * @param address\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst saveAddress = (address, token) => {\r\n    return instance.post(\r\n        APP_ENDPOINTS.ADD_ADDRESS_ENDPOINT, address, {\r\n            headers: { 'Content-type': 'application/json',\r\n                        'Authorization': bearerAuth(token),\r\n                     }\r\n        }\r\n    )\r\n}\r\n\r\n/**\r\n * Load the list of articles\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst loadArticleList = (token) => {\r\n    return instance.get(APP_ENDPOINTS.SYLOB_DATA_ENDPOINT, {\r\n        headers: {'Authorization': bearerAuth(token)}\r\n    })\r\n}\r\n\r\n/**\r\n * Create a new Article from Sylob\r\n * @param sylobObject\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst addArticlesInVouchar = (articles, token) => {\r\n    return instance.post(APP_ENDPOINTS.ADD_SYLOB_ARTICLE_ENDPOINT, articles, {\r\n            headers: { 'Content-type': 'application/json',\r\n            'Authorization': bearerAuth(token),\r\n            }\r\n         }\r\n         )\r\n}\r\n\r\n/**\r\n * Gets available kits in the User's Company\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst getKitsListFromSylob = async (token) => {\r\n    // const request =  await APP_API.getUserByEmail(helpers.getUserEmail(), userToken)\r\n    // const companyCode = await request.data.company.code;\r\n\r\n    return instance.get(APP_ENDPOINTS.SYLOB_KIT_LIST_ENDPOINT, {\r\n        headers: {\r\n            'Access-Control-Allow-Origin': \"*\",\r\n            'Authorization': bearerAuth(token)\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Gets a specific Kit by its label (label is a key in Sylob)\r\n * @param label\r\n * @param token\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nconst getKitByLabel = (label, token) => {\r\n\r\n    return instance.get(APP_ENDPOINTS.FIND_KIT_BY_LABEL_ENDPOINT+label, {\r\n        headers: {'Authorization': bearerAuth(token)}\r\n    })\r\n}\r\n\r\n/**\r\n * Exportation\r\n * @type {{getCompanyList: (function(*=): Promise<AxiosResponse<*>>), getKitByLabel: (function(*, *=): Promise<AxiosResponse<*>>), getSylobData: (function(*=): Promise<AxiosResponse<any>>), getAddressList: (function(*=): Promise<AxiosResponse<*>>), addUser: (function(*=, *=): Promise<AxiosResponse<*>>), getKitsListFromSylob: (function(*=): Promise<AxiosResponse<any>>), getUserList: (function(*=): Promise<AxiosResponse<*>>), getUserByEmail: (function(*, *=): Promise<AxiosResponse<*>>), saveCompany: (function(*=, *=): Promise<AxiosResponse<*>>), saveAddress: (function(*=, *=): Promise<AxiosResponse<*>>), addArticlesInVouchar: (function(*=, *=): Promise<AxiosResponse<*>>), getCompanyByCode: (function(*, *=): Promise<AxiosResponse<*>>), getUserMe: (function(*=): Promise<AxiosResponse<*>>), saveUserMe: (function(*=, *=): Promise<AxiosResponse<*>>), loadArticleList: (function(*=): Promise<AxiosResponse<*>>)}}\r\n */\r\nexport const APP_API = {\r\n    getUserMe,\r\n    saveUserMe,\r\n    getUserList,\r\n    getCompanyList,\r\n    getAddressList,\r\n    saveAddress,\r\n    saveCompany,\r\n    getCompanyByCode,\r\n    addUser,\r\n    getUserByEmail,\r\n    getSylobData,\r\n    loadArticleList,\r\n    addArticlesInVouchar,\r\n    getKitsListFromSylob,\r\n    getKitByLabel\r\n}"]},"metadata":{},"sourceType":"module"}